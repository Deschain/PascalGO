/* Seccion de opctiones */
options{
	IGNORE_CASE = true;
	VISITOR = true;
}

/* Seccion de ejecucion */
PARSER_BEGIN(PascalGO)

	package pascalGO.grammar;
	
	/* Imports */	
		
import java.util.ArrayList;
import pascalGO.table.SymbolTable;	
import pascalGO.types.*;	

	public class PascalGO 
	{
		private static SymbolTable symbolTable = new SymbolTable();	
		
		public static void main (String[] argum) throws ParseException
		{
		
		  SimpleNode tree = null;
			try{				PascalGO analizador = new PascalGO(System.in);			
				//Llamar al metodo que reconoce la primera expresion del sintactico
				tree = analizador.start();
				tree.dump("");
				//Mensajes de salida como exito
				System.out.println("Todo ha ido bien");		
			}catch(ParseException error){				
				  int[][] expectedTokens = error.expectedTokenSequences;
				  System.out.println("Error en "+PascalGO.token.beginLine+","+PascalGO.token.beginColumn);
				  System.out.print("Se esperaba: ");
				  for (int i = 0; i < expectedTokens.length; i++) {			    
				  	for (int j = 0; j < expectedTokens[i].length; j++) {
					        System.out.println(tokenImage[expectedTokens[i][j]]+' ');
					  }				  }
				  System.out.println("Y se ha recibido: "+error.currentToken.next.image);
				  //tree.dump("");			   			  
			}catch(Exception error){
			  			}			
		}

		/**public  static void duplicateIDCheck (Token id)		{
		  	BasicType aux = null;
		  	if ((aux= symbolTable.totalSearch(id.image)) == null)
		  	{
		  		symbolTable.add(new Constant(id));
		  	}
		  	else
		  	{  
		  		System.out.println("Error [" + id.beginLine + "," + id.beginColumn + "]: Symbol <" + id.image + "> already exists");
		  	} 			}*/

		public static boolean typeExistsCheck (String type)		{
		  	return false;		}

		public static boolean idExistsCheck (String id)		{
		  	return false;		}

		
	}
PARSER_END(PascalGO)

/* Seccion de sintaxis */
	
	SimpleNode start():
	{}
	{
		programaCompleto()
		{			
			return jjtThis ;
		}
	}
	
	void programaCompleto():
	{ }
	{
		programa()<PUNTO>
	}
	
	/* Regla 1 */
	void programa():
	{
	}
	{		
		<PROGRAM><ID><PUNTOYCOMA>bloque()		
	}
	
	
	/* Regla 2 */
	void bloque():
	{}
	{
		declaracion()grupoSent()
	}
	
	/* Regla 3 */
	void declaracion():
	{}
	{
		[defCte()][defTip()][defVar()](defSubpr())*
	}
	
	/* Regla 4 */
	void defCte():
	{ }
	{	
		//Revisar que javaCC ofrece pontencial para definir mejor esta expresion 
		<CONST> (unaConst()<PUNTOYCOMA>)+
	}
	
	/* Regla 5 */
	void unaConst():
	{
		Token constName;		
		//integerConstant constant = new integerConstant("",0,'');
	}
	{
		constName = <ID> <IGUAL> constante()
		{
		  	symbolTable.add(new Constant(constName));
		}
	}
	
	/* Regla 6 */
	void defTip():
	{}
	{
		<TYPE> untipo() <PUNTOYCOMA> (untipo()<PUNTOYCOMA>)*
	}
	
	/* Regla 7 */
	//TODO COmprobar si podemos a–adir el lookahead para evitar tener que crear el tipo Type, ya que tiene 2 posibilidades
	//Que sea un array o un record, es posible que nos interese guardar cada uno como es, peor la comprobacion de la existencia
	//previa del identificador se hace aqui.
	void untipo():
	{
		Token tipoName;
	}
	{
		tipoName = <ID> tipoEstr()
		{
		  	symbolTable.add(new Type(tipoName));		}
	}
	
	/* Regla 8 */
	void tipoEstr():
	{}
	{
			estrTab()
	/* Regla 9 */
		|	estrReg() bloque()
	}
	
	/* Regla 10 */
	void estrTab():
	{}
	{
		<ARRAY> <CORCHETEIZ> constante() <RANGO> constante() <CORCHETEDE> <OF> <ID>
	}
	
	/* Regla 11 */
	void estrReg():
	{
		ArrayList <ListVar> lists = new ArrayList <ListVar >();
		ListVar aux;
	}
	{
		<RECORD> aux = listaVar()		{
		    lists.add(aux);		}
		(<PUNTOYCOMA> aux = listaVar()		{
		    lists.add(aux);		}
		)* <END>
	}
	
	/* Regla 12 */
	void defVar():
	{}
	{
		<VAR> listaVar() <PUNTOYCOMA> (listaVar()<PUNTOYCOMA>)*
	}
	
	/* Regla 13 */
	void defSubpr():
	{
		Token procName;
		ArrayList <ListVar>  params = new ArrayList <ListVar>();
	}
	{
		<PROCEDURE> procName = <ID> [ <PARENTESISIZ> params = parFormales() <PARENTESISDE> ] <PUNTOYCOMA> bloque() <PUNTOYCOMA>
		{
			symbolTable.add(new Procedure (procName,params));
		}
	}
	
	/* Regla 14 */
	ArrayList <ListVar> parFormales():
	{
		ArrayList <ListVar> lists = new ArrayList <ListVar >();
		ListVar aux;
	}
	{
		aux = listaParam()
		{
		    lists.add(aux);		}
		(<PUNTOYCOMA> aux= listaParam()		{
		    lists.add(aux);		})*
		{
		    return lists;		}
	}
	
	/* Regla 15 */
	ListVar listaParam():
	{
		ListVar list;
		Token access = null;
	}
	{
		[access = <VAR>] list = listaVar()
		{
		    if (access != null)		    {
		    	list.setAccess(true);		    }
		    return list;		}
	}
	
	/* Regla 16 */
	ListVar listaVar():
	{
		ListVar list = new ListVar();
		Token aux;
	}
	{
		aux = <ID>		{
			list.add (aux);		} (<COMA> aux = <ID>		{
		    list.add (aux);		}
		)* <DOSPUNTOS> aux = <ID>
		{
		    list.setType(aux);
		    return list;		}
		
	}
	
	/* Regla 17 */
	void grupoSent():
	{}
	{
		<BEGIN> sentencia() (<PUNTOYCOMA> sentencia())* <END>
	}
	
	/* Regla 18 */
	void sentencia():
	{}
	{
		[
			asignLlamada()
	/* Regla 19 */
		|	condicional()
	/* Regla 20 */
		|	ciclica()
	/* Regla 21 */
		|	grupoSent()
	/* Regla 22 */
		]

	}
	
	/* Regla 23 */
	void asignLlamada():
	{
		Token llamName;
	}
	{
		llamName = <ID> restoAsignLlam()
		{
		  	//symbolTable.check(llamName);		}
	}
	
	/* Regla 24 */
	void restoAsignLlam():
	{}
	{
		[
				restoNombre() <ASIGNACION> expresion()
	/* Regla 25 */
			|	<PARENTESISIZ> parLlamada() <PARENTESISDE>
		]
	/* Regla 26 */
	}
	
	/* Regla 27 */
	void condicional():
	{}
	{
		<IF> expresion() <THEN> sentencia() [<ELSE> sentencia()]
	}
	
	/* Regla 28 */
	void ciclica():
	{}
	{
		<WHILE> expresion() <DO> sentencia()
	}
	
	/* Regla 29 */
	void parLlamada():
	{}
	{
		expresion() ( <COMA> expresion() )*
	}
	
	/* Regla 30 */
	void expresion():
	{}
	{
		exprSimple() [ opRel() exprSimple() ] 
	}
	
	/* Regla 31 */
	void exprSimple():
	{}
	{
		[ signo() ] termino() ( opAdt() termino() )*
	}
	
	/* Regla 32 */
	void termino():
	{}
	{
		factor() ( opMul() factor() )*
	}
	
	/* Regla 33 */
	void factor():
	{}
	{
			<CTE>
	/* Regla 34 */
		|	<ID> restoNombre()
	/* Regla 35 */	
		| 	<NOT> factor()
	/* Regla 36 */
		|	<PARENTESISIZ> expresion() <PARENTESISDE>
	}
	
	/* Regla 37 */
	void restoNombre():
	{}
	{
		( selector() )*
	}
	
	/* Regla 38 */
	void selector():
	{}
	{
			<CORCHETEIZ> expresion() <CORCHETEDE>
	/* Regla 39 */
		|	<PUNTO> <ID>
	}
	
	/* Regla 40 */
	void constante():
	{}
	{
		[ signo() ] cteSinSigno()
	}
	
	/* Regla 41 */
	void cteSinSigno():
	{}
	{
			<ID>
		|	<CTE>	
	}
	
	/* Regla 42 */
	void opRel():
	{}
	{
			<MAYOR>
		|	<MAYORIG>
		|	<MENOR>
		|	<MENORIG>
		|	<IGUAL>
		|	<DESIGUAL>
	}
	
	/* Regla 43 */
	void opAdt():
	{}
	{
			<SUMA>
		|	<RESTA>
		|	<OR>
	}
	
	/* Regla 44 */
	void opMul():
	{}
	{
			<MULT>
		|	<DIV>
		|	<MOD>
		|	<AND>
	}
	
	/* Regla 45 */
	void signo():
	{}
	{
			<SUMA>
		|	<RESTA>
	}
	
/* Seccion de lexico */
	/* Faltan por identificar los comentarios, y un repaso a los tokens que utilizan ER */

/* Caracteres que se omiten */
	SKIP:{
	  " "
	  | "\r"
	  | "\t"
	  | "\n"
	}

/* Palabras reservadas */
	TOKEN:{
			<AND: 	"and">
		|	<ARRAY: "array">
		|	<BEGIN:	"begin">
		|	<CONST: "const">
		|	<DIV:	"div">
		|	<DO:	"do">
		|	<ELSE:	"else">
		|	<END:	"end"> 
		|	<IF:	"if">
		|	<MOD:	"mod">
		|	<NOT:	"not">
		|	<OF:	"of">
		|	<OR:	"or">
		|	<PROCEDURE:	"procedure">
		|	<PROGRAM:	"program">
		|	<RECORD:	"record">
		|	<THEN:	"then">
		|	<TYPE:	"type">	
		|	<VAR:	"var">
		|	<WHILE:	"while">
	}

/* Operadores aritmeticos */
	TOKEN:{
	  	<SUMA:	"+">
	  |	<RESTA:	"-">
	  |	<MULT:	"*">
	}

/* Operadores relacionales */
	TOKEN:{
	 	<MAYOR:		">">
	 |	<MAYORIG:	">=">
	 |	<MENOR:		"<">
	 |	<MENORIG:	"<=">
	 |	<IGUAL:		"=">
	 |	<DESIGUAL:	"<>">
	}

/* Asignacion */
	TOKEN:{
	  <ASIGNACION:	":=">
	}

/* Signos de puntuacion */
	TOKEN:{
	  	<PARENTESISIZ:	"(">
	  |	<PARENTESISDE:	")">
	  |	<CORCHETEIZ:	"[">
	  |	<CORCHETEDE:	"]">
	  |	<COMA:			",">
	  |	<PUNTOYCOMA:	";">
	  |	<PUNTO:			".">
	  |	<DOSPUNTOS:		":">
	}


/* Rango */
	TOKEN:{
	  <RANGO:		"..">
	}
	
/* Identificador */
	TOKEN:{
  		<ID: ["a"-"z"](["a"-"z","0"-"9"])*>
	}
	
/* Constante */
	TOKEN:{
			<CTE: ["1"-"9" ,"0"](["0"-"9"])* >
	}