/* Generated By:JavaCC: Do not edit this line. PascalGO.java */
        package pascalGO.gramatica;
        /* Imports */

        public class PascalGO implements PascalGOConstants {

                public static void main (String[] argum) throws ParseException
                {
                        PascalGO analizador = new PascalGO(System.in);
                        //Llamar al metodo que reconoce la primera expresion del sintactico
                        analizador.programaCompleto();
                        //Mensajes de salida como exito
                        System.out.println("Todo ha ido bien");
                }

/* Seccion de sintaxis */
  static final public void programaCompleto() throws ParseException {
    programa();
    jj_consume_token(0);
  }

        /* Regla 1 */
  static final public void programa() throws ParseException {
    jj_consume_token(PROGRAM);
    jj_consume_token(ID);
    jj_consume_token(PUNTOYCOMA);
    bloque();
  }

        /* Regla 2 */
  static final public void bloque() throws ParseException {
    declaracion();
    grupoSent();
  }

        /* Regla 3 */
  static final public void declaracion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      defCte();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPE:
      defTip();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      defVar();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      defSubpr();
    }
  }

        /* Regla 4 */
  static final public void defCte() throws ParseException {
    jj_consume_token(CONST);
    unaConst();
    jj_consume_token(PUNTOYCOMA);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      unaConst();
      jj_consume_token(PUNTOYCOMA);
    }
  }

        /* Regla 5 */
  static final public void unaConst() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(IGUAL);
    constante();
  }

        /* Regla 6 */
  static final public void defTip() throws ParseException {
    jj_consume_token(TYPE);
    untipo();
    jj_consume_token(PUNTOYCOMA);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      untipo();
      jj_consume_token(PUNTOYCOMA);
    }
  }

        /* Regla 7 */
  static final public void untipo() throws ParseException {
    jj_consume_token(ID);
    tipoEstr();
  }

        /* Regla 8 */
  static final public void tipoEstr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY:
      estrTab();
      break;
    case RECORD:
      estrReg();
      bloque();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Regla 10 */
  static final public void estrTab() throws ParseException {
    jj_consume_token(ARRAY);
    jj_consume_token(CORCHETEIZ);
    constante();
    jj_consume_token(RANGO);
    constante();
    jj_consume_token(CORCHETEDE);
    jj_consume_token(OF);
    jj_consume_token(ID);
  }

        /* Regla 11 */
  static final public void estrReg() throws ParseException {
    jj_consume_token(RECORD);
    listaVar();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      listaVar();
      jj_consume_token(PUNTOYCOMA);
    }
    jj_consume_token(END);
  }

        /* Regla 12 */
  static final public void defVar() throws ParseException {
    jj_consume_token(VAR);
    listaVar();
    jj_consume_token(PUNTOYCOMA);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      listaVar();
      jj_consume_token(PUNTOYCOMA);
    }
  }

        /* Regla 13 */
  static final public void defSubpr() throws ParseException {
    jj_consume_token(PROCEDURE);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENTESISIZ:
      jj_consume_token(PARENTESISIZ);
      parFormales();
      jj_consume_token(DOSPUNTOS);
      jj_consume_token(PARENTESISDE);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(PUNTOYCOMA);
    bloque();
    jj_consume_token(PUNTOYCOMA);
  }

        /* Regla 14 */
  static final public void parFormales() throws ParseException {
    listaParam();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOYCOMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      jj_consume_token(PUNTOYCOMA);
      listaParam();
    }
  }

        /* Regla 15 */
  static final public void listaParam() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      jj_consume_token(VAR);
    }
    listaVar();
  }

        /* Regla 16 */
  static final public void listaVar() throws ParseException {
    jj_consume_token(ID);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMA);
      jj_consume_token(ID);
    }
    jj_consume_token(DOSPUNTOS);
    jj_consume_token(ID);
  }

        /* Regla 17 */
  static final public void grupoSent() throws ParseException {
    jj_consume_token(BEGIN);
    sentencia();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUNTOYCOMA:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_9;
      }
      jj_consume_token(PUNTOYCOMA);
      sentencia();
    }
    jj_consume_token(END);
  }

        /* Regla 18 */
  static final public void sentencia() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGIN:
    case IF:
    case WHILE:
    case ID:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        asignLlamada();
        break;
      case IF:
        condicional();
        break;
      case WHILE:
        ciclica();
        break;
      case BEGIN:
        grupoSent();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

        /* Regla 23 */
  static final public void asignLlamada() throws ParseException {
    jj_consume_token(ID);
    restoAsignLlam();
  }

        /* Regla 24 */
  static final public void restoAsignLlam() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENTESISIZ:
    case CORCHETEIZ:
    case PUNTO:
    case ASIGNACION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CORCHETEIZ:
      case PUNTO:
      case ASIGNACION:
        restoNombre();
        jj_consume_token(ASIGNACION);
        expresion();
        break;
      case PARENTESISIZ:
        jj_consume_token(PARENTESISIZ);
        parLlamada();
        jj_consume_token(PARENTESISDE);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

        /* Regla 27 */
  static final public void condicional() throws ParseException {
    jj_consume_token(IF);
    expresion();
    jj_consume_token(THEN);
    sentencia();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      sentencia();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

        /* Regla 28 */
  static final public void ciclica() throws ParseException {
    jj_consume_token(WHILE);
    expresion();
    jj_consume_token(DO);
    sentencia();
  }

        /* Regla 29 */
  static final public void parLlamada() throws ParseException {
    expresion();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      jj_consume_token(COMA);
      expresion();
    }
  }

        /* Regla 30 */
  static final public void expresion() throws ParseException {
    exprSimple();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAYOR:
    case MAYORIG:
    case MENOR:
    case MENORIG:
    case IGUAL:
    case DESIGUAL:
      opRel();
      exprSimple();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

        /* Regla 31 */
  static final public void exprSimple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
      signo();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    termino();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case SUMA:
      case RESTA:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      opAdt();
      termino();
    }
  }

        /* Regla 32 */
  static final public void termino() throws ParseException {
    factor();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case DIV:
      case MOD:
      case MULT:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_12;
      }
      opMul();
      factor();
    }
  }

        /* Regla 33 */
  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CTE:
      jj_consume_token(CTE);
      break;
    case ID:
      jj_consume_token(ID);
      restoNombre();
      break;
    case NOT:
      jj_consume_token(NOT);
      factor();
      break;
    case PARENTESISIZ:
      jj_consume_token(PARENTESISIZ);
      expresion();
      jj_consume_token(PARENTESISDE);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Regla 37 */
  static final public void restoNombre() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CORCHETEIZ:
      case PUNTO:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_13;
      }
      selector();
    }
  }

        /* Regla 38 */
  static final public void selector() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CORCHETEIZ:
      jj_consume_token(CORCHETEIZ);
      expresion();
      jj_consume_token(CORCHETEDE);
      break;
    case PUNTO:
      jj_consume_token(PUNTO);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Regla 40 */
  static final public void constante() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
      signo();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    cteSinSigno();
  }

        /* Regla 40 */
  static final public void cteSinSigno() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case CTE:
      jj_consume_token(CTE);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Regla 41 */
  static final public void opRel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAYOR:
      jj_consume_token(MAYOR);
      break;
    case MAYORIG:
      jj_consume_token(MAYORIG);
      break;
    case MENOR:
      jj_consume_token(MENOR);
      break;
    case MENORIG:
      jj_consume_token(MENORIG);
      break;
    case IGUAL:
      jj_consume_token(IGUAL);
      break;
    case DESIGUAL:
      jj_consume_token(DESIGUAL);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Regla 42 */
  static final public void opAdt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Regla 43 */
  static final public void opMul() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      jj_consume_token(MULT);
      break;
    case DIV:
      jj_consume_token(DIV);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

        /* Regla 44 */
  static final public void signo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PascalGOTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x400000,0x800000,0x40000,0x0,0x0,0x100040,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x1002080,0x1002080,0x0,0x0,0x800,0x0,0xf0000000,0x6000000,0x6020000,0x8004220,0x8000,0x0,0x0,0x6000000,0x0,0xf0000000,0x6020000,0x8004220,0x6000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x1000,0x1000,0x4,0x80,0x0,0x40,0x80,0x1000,0x1000,0x514,0x514,0x0,0x40,0x3,0x0,0x0,0x0,0x3004,0x110,0x110,0x0,0x3000,0x3,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public PascalGO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PascalGO(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PascalGOTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PascalGO(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PascalGOTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PascalGO(PascalGOTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PascalGOTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

        }
